class Solution {
public:
    int binarySearch(vector<int>& nums, int target, int l, int r){
    
        while(l<=r){
            int mid = l+(r-l)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(target<nums[mid]){
                r = mid-1;
            }else if(target>nums[mid]){
                l = mid+1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int i = 0;
        int n = nums.size();
        while(i+1<n and nums[i]<nums[i+1]){
            i++;
        }
        // auto it = nums.begin()+i ;
        // cout << *it << endl;
        ans = binarySearch(nums, target, 0, i);
        if(ans!=-1) return ans;
        else if(i+1!=n){
            return binarySearch(nums, target, i+1, n-1);
        }else return -1;
    }
};
